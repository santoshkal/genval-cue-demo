apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
    name: capten-pipeline
    namespace: tekton-pipelines
spec:
    description: This pipeline clones a git repo, then echoes the README file to the stout.
    finally:
        - name: github-set-status-fail
          params:
            - name: STATE
              value: failure
            - name: GITHUB_HOST_URL
              value: api.github.com
            - name: REPO_FULL_NAME
              value: $(params.reponame)
            - name: GITHUB_TOKEN_SECRET_NAME
              value: gitcred-capten-pipeline
            - name: GITHUB_TOKEN_SECRET_KEY
              value: password
            - name: SHA
              value: $(params.revision)
            - name: TARGET_URL
              value: http://tekton.demoagent.optimizor.app/#/namespaces/tekton-pipelines/pipelineruns/trigger-$(params.ID)
            - name: CONTEXT
              value: tekton-pipeline
            - name: DESCRIPTION
              value: An error occurred building your commit in Tekton
          taskRef:
            kind: ClusterTask
            name: github-set-status
          when:
            - input: $(tasks.status)
              operator: in
              values:
                - Failed
                - None
        - name: github-set-status-success
          params:
            - name: STATE
              value: success
            - name: GITHUB_HOST_URL
              value: api.github.com
            - name: REPO_FULL_NAME
              value: $(params.reponame)
            - name: GITHUB_TOKEN_SECRET_NAME
              value: gitcred-capten-pipeline
            - name: GITHUB_TOKEN_SECRET_KEY
              value: password
            - name: SHA
              value: $(params.revision)
            - name: TARGET_URL
              value: http://tekton.demoagent.optimizor.app/#/namespaces/tekton-pipelines/pipelineruns/trigger-$(params.ID)
            - name: CONTEXT
              value: tekton-pipeline
            - name: DESCRIPTION
              value: Finished building your commit in Tekton
          taskRef:
            kind: ClusterTask
            name: github-set-status
          when:
            - input: $(tasks.status)
              operator: in
              values:
                - Succeeded
                - Completed
    params:
        - description: The git repo URL to clone from.
          name: repo-url
          type: string
        - name: revision
          type: string
        - default: github.com
          description: Define the Source code Management URL
          name: PARAM_SCM
          type: string
        - default: .
          description: The path to the build context, used bThis pipeline clones a git repo, then echoes the README file to the stout.y Kaniko - within the workspace
          name: pathToContext
        - description: Image name including repository
          name: imageUrl
        - default: latest
          description: Image tag
          name: imageTag
        - description: name of event happens
          name: eventname
        - description: repo name
          name: reponame
        - description: rel tag
          name: retag
        - description: id of pipelinerun
          name: ID
        - default: example@gmail.com
          description: email of the user
          name: userEmail
        - description: application name
          name: NAME
    tasks:
        - name: fetch-source
          params:
            - name: url
              value: $(params.repo-url)
            - name: PARAM_SCM
              value: $(params.PARAM_SCM)
            - name: revision
              value: $(params.revision)
          taskRef:
            kind: ClusterTask
            name: git-clone
          workspaces:
            - name: output
              workspace: shared-data
            - name: basic-auth
              workspace: git-credentials
        - name: build
          params:
            - name: CONTEXT
              value: $(params.pathToContext)
            - name: IMAGE
              value: $(params.imageUrl):$(params.imageTag)
          runAfter:
            - fetch-source
          taskRef:
            kind: ClusterTask
            name: kaniko
          workspaces:
            - name: source
              workspace: shared-data
            - name: dockerconfig
              workspace: docker-credentials
        - name: deploy-app
          params:
            - name: NAME
              value: $(params.NAME)
            - name: userEmail
              value: $(params.userEmail)
            - name: IMAGE
              value: $(params.imageUrl)
            - name: ImageTag
              value: $(params.imageTag)
          runAfter:
            - cosign-sign
          taskRef:
            kind: ClusterTask
            name: deploy
          workspaces:
            - name: basic-auth
              workspace: deploy-creds
            - name: output
              workspace: shared-data
            - name: argo-auth
              workspace: argo-creds
        - name: qt-testcase
          params:
            - name: QT_SERVER
              value: http://quality-trace/demoagent.optimizor.app/
          runAfter:
            - deploy-app
          taskRef:
            kind: ClusterTask
            name: install-and-run-qt
          workspaces:
            - name: basic-auth
              workspace: git-credentials
            - name: output
              workspace: shared-data
        - name: cosign-sign
          params:
            - name: image
              value: $(params.imageUrl)@$(tasks.build.results.IMAGE_DIGEST)
            - name: eventname
              value: $(params.eventname)
          runAfter:
            - build
          taskRef:
            kind: ClusterTask
            name: cosign-sign
          when:
            - input: $(params.eventname)
              operator: in
              values:
                - push
                - tag
                - release
          workspaces:
            - name: source
              workspace: shared-data
            - name: dockerconfig
              workspace: dockerconfig
            - name: cosign
              workspace: cosign
    workspaces:
        - description: |
            This workspace contains the cloned repo files, so they can be read by the
            next task.
          name: shared-data
        - description: basic-auth
          name: git-credentials
        - description: docker cred
          name: docker-credentials
        - name: cosign
        - name: dockerconfig
        - name: cosign-pub
        - description: app and cluster details
          name: deploy-creds
        - description: argocd server and credentials
          name: argo-creds
